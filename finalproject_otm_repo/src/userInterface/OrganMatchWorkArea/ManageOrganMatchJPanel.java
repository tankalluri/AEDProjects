/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package userInterface.OrganMatchWorkArea;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.HospitalEnterprise;
import Business.Network.Network;
import Business.Organization.Organization;
import Business.Person.Donor;
import Business.Person.Recipient;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Game of Threads
 */
public class ManageOrganMatchJPanel extends javax.swing.JPanel {

   JPanel rightPanel;
   EcoSystem ecoSystem;
    /**
     * Creates new form OrganMatchByDonorJPanel
     */
    public ManageOrganMatchJPanel(JPanel rightPanel, EcoSystem eco) {
        initComponents();
        this.ecoSystem = eco;
        this.rightPanel = rightPanel;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        matchByDonor = new javax.swing.JButton();
        matchByRecipientBtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 153, 153));

        matchByDonor.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        matchByDonor.setText("Match Organ by Donor availability");
        matchByDonor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchByDonorActionPerformed(evt);
            }
        });

        matchByRecipientBtn.setFont(new java.awt.Font("Times New Roman", 1, 23)); // NOI18N
        matchByRecipientBtn.setText("Match Organ by Recipient severity");
        matchByRecipientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchByRecipientBtnActionPerformed(evt);
            }
        });

        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/userInterface/Images/IMAGES/back.jpg"))); // NOI18N
        jButton3.setToolTipText("");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(matchByDonor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 197, Short.MAX_VALUE)
                .addComponent(matchByRecipientBtn)
                .addGap(285, 285, 285))
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(110, 110, 110)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(matchByDonor)
                    .addComponent(matchByRecipientBtn))
                .addGap(109, 109, 109)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void matchByRecipientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchByRecipientBtnActionPerformed
      
        List<Recipient> recipientList = createListOfRecipients();
        if(recipientList.size() > 0){
            OrganMatchByRecipientJPanel organMatch = new OrganMatchByRecipientJPanel(rightPanel, ecoSystem, recipientList);
            rightPanel.add("organMatch", organMatch);
            CardLayout layout = (CardLayout) rightPanel.getLayout();
            layout.next(rightPanel);
        }else {
            JOptionPane.showMessageDialog(null, "Currently there are no recipients.");
        }
    }//GEN-LAST:event_matchByRecipientBtnActionPerformed

    private void matchByDonorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchByDonorActionPerformed
        
        List<Donor> donorList = createListOfDonors();
        if(donorList.size() > 0){
            OrganMatchByDonorJPanel organMatch = new OrganMatchByDonorJPanel(rightPanel, ecoSystem, donorList);
            rightPanel.add("organMatch", organMatch);
            CardLayout layout = (CardLayout) rightPanel.getLayout();
            layout.next(rightPanel);
        }else {
            JOptionPane.showMessageDialog(null, "Currently there are no donors.");
        }
    }//GEN-LAST:event_matchByDonorActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        rightPanel.remove(this);
        CardLayout layout = (CardLayout) rightPanel.getLayout();
        layout.previous(rightPanel);
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton3;
    private javax.swing.JButton matchByDonor;
    private javax.swing.JButton matchByRecipientBtn;
    // End of variables declaration//GEN-END:variables

 private List<Recipient> createListOfRecipients() {
        
        List<Recipient> recipientList = new ArrayList<Recipient>();
        
        for (Network network : ecoSystem.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if(enterprise instanceof HospitalEnterprise){
                    for(Organization or : enterprise.getOrganizationDirectory().getOrganizationList()){
                        if(or.getName().equals("Visitor Organization")){
                            for( Recipient recipient : or.getRecipientDirectory().getRecipientList()){
                                  if(recipient.getPriority() > 0){
                                      recipient.setNetwork(network.getName());
                                      recipientList.add(recipient);
                                  }
                            }
                        }
                    }
                }
                
            }
        }
        
       // List<Map.Entry<String, Recipient>> list = new ArrayList<Map.Entry<String, Recipient>>(recipientList.entrySet());
        //sort recipient list by their sevirity
        Collections.sort(recipientList, new Comparator<Recipient>() {
            @Override
            public int compare(Recipient o1, Recipient o2) {
                return o1.compareTo(o2);
            }
        });
        
        return recipientList;
    }

    private List<Donor> createListOfDonors() {
        
         List<Donor> donorList = new ArrayList<Donor>();
         
        for (Network network : ecoSystem.getNetworkList()) {
            for (Enterprise enterprise : network.getEnterpriseDirectory().getEnterpriseList()) {
                if(enterprise instanceof HospitalEnterprise){
                    for (Organization or : enterprise.getOrganizationDirectory().getOrganizationList()) {
                        if (or.getName().equalsIgnoreCase("Visitor Organization")) {
                            for (Donor donor : or.getDonorDirectory().getDonorList()) {
                                if(donor.getIsOrganAvaiNow()){

                                    donor.setNetwork(network.getName());
                                    donorList.add(donor);
                                }
                            }
                        }

                    }
                }
                
            }
        }
        
        return donorList;
    }
}
